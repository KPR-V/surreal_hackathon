"use client";

import React, { useState } from 'react';

interface ClaimRevenueMyIPProps {
  isOpen: boolean;
  onClose: () => void;
  currentIpId: string;
  onClaim?: (data: ClaimMyIPData) => void;
}

interface ClaimMyIPData {
  ipId: string;
  useWipToken: boolean;
}

export const ClaimRevenueMyIPModal: React.FC<ClaimRevenueMyIPProps> = ({
  isOpen,
  onClose,
  currentIpId,
  onClaim
}) => {
  const [formData, setFormData] = useState<ClaimMyIPData>({
    ipId: currentIpId,
    useWipToken: true
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onClaim?.(formData);
    onClose();
  };

  const handleInputChange = (field: keyof ClaimMyIPData, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-hidden">
      <div className="absolute inset-0 bg-black/80 backdrop-blur-sm" onClick={onClose}></div>
      
      <div className="relative h-full flex items-center justify-center p-4">
        <div className="relative bg-zinc-900/95 backdrop-blur-xl border border-zinc-700/30 rounded-2xl w-full max-w-2xl max-h-[90vh] flex flex-col overflow-hidden shadow-2xl">
          
          {/* Header */}
          <div className="flex-shrink-0 px-6 py-4 border-b border-zinc-700/30">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-green-500/10 rounded-lg">
                  <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                  </svg>
                </div>
                <div>
                  <h2 className="text-lg font-medium text-white">Claim My IP Revenue</h2>
                  <p className="text-xs text-zinc-400">Collect all revenue generated by this IP Asset</p>
                </div>
              </div>
              
              <button 
                onClick={onClose}
                className="p-2 text-zinc-400 hover:text-zinc-300 hover:bg-zinc-800/50 rounded-lg transition-all duration-200"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>

          {/* Scrollable Content */}
          <div className="flex-1 overflow-y-auto px-6 py-6">
            <form onSubmit={handleSubmit} className="space-y-5">
              
              {/* Info Banner */}
              <div className="bg-green-500/5 border border-green-500/20 rounded-lg p-3">
                <div className="flex items-start space-x-2">
                  <svg className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <div className="text-xs">
                    <p className="text-green-300 font-medium mb-1">What is My IP Revenue?</p>
                    <p className="text-green-200">
                      This function claims all revenue generated directly by this IP Asset from licensing, 
                      royalties, and other income sources. No child IP relationships required.
                    </p>
                  </div>
                </div>
              </div>

              {/* IP Account (Read-only) */}
              <div className="space-y-2">
                <label className="block text-xs font-medium text-white uppercase tracking-wider">
                  IP Account ID
                  <span className="text-zinc-500 font-normal ml-1 normal-case">(your asset)</span>
                </label>
                <input
                  type="text"
                  value={formData.ipId}
                  readOnly
                  className="w-full px-3 py-2.5 bg-zinc-700/30 border border-zinc-700/50 rounded-lg text-zinc-400 font-mono text-xs cursor-not-allowed"
                />
                <p className="text-xs text-zinc-500">
                  The IP Account whose revenue will be claimed (automatically filled)
                </p>
              </div>

              {/* Token Type Selection */}
              <div className="space-y-2">
                <label className="block text-xs font-medium text-white uppercase tracking-wider">Revenue Token Type</label>
                <div className="grid grid-cols-2 gap-3">
                  <button
                    type="button"
                    onClick={() => handleInputChange('useWipToken', true)}
                    className={`p-3 rounded-lg border transition-all duration-200 ${
                      formData.useWipToken
                        ? 'bg-green-500/20 border-green-500/30 text-green-300'
                        : 'bg-zinc-800/30 border-zinc-700/30 text-zinc-400 hover:bg-zinc-700/30'
                    }`}
                  >
                    <div className="text-left">
                      <p className="text-sm font-medium">WIP Token</p>
                      <p className="text-xs opacity-75">Story Protocol native token</p>
                    </div>
                  </button>
                  <button
                    type="button"
                    onClick={() => handleInputChange('useWipToken', false)}
                    className={`p-3 rounded-lg border transition-all duration-200 ${
                      !formData.useWipToken
                        ? 'bg-green-500/20 border-green-500/30 text-green-300'
                        : 'bg-zinc-800/30 border-zinc-700/30 text-zinc-400 hover:bg-zinc-700/30'
                    }`}
                  >
                    <div className="text-left">
                      <p className="text-sm font-medium">MERC20 Token</p>
                      <p className="text-xs opacity-75">Custom ERC-20 token</p>
                    </div>
                  </button>
                </div>
              </div>

              {/* Revenue Sources Info */}
              <div className="bg-zinc-800/30 rounded-lg p-4">
                <h5 className="text-sm font-medium text-white mb-3">Revenue Sources Claimed:</h5>
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-xs text-zinc-300">Direct licensing fees from this IP</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-xs text-zinc-300">Royalties from derivative works</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-xs text-zinc-300">Revenue sharing distributions</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span className="text-xs text-zinc-300">Other income generated by this IP</span>
                  </div>
                </div>
              </div>

              {/* Auto-transfer Settings Info */}
              <div className="bg-blue-500/5 border border-blue-500/20 rounded-lg p-3">
                <div className="flex items-start space-x-2">
                  <svg className="w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <div className="text-xs">
                    <p className="text-blue-300 font-medium mb-1">Automatic Features Enabled:</p>
                    <ul className="text-blue-200 space-y-0.5 text-xs">
                      <li>• Auto-transfer: Claimed tokens will be automatically transferred to your wallet</li>
                      <li>• Auto-unwrap: IP tokens will be unwrapped to base tokens automatically</li>
                      <li>• Gas optimization: Uses the most efficient claiming method available</li>
                    </ul>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3 pt-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="flex-1 px-4 py-2.5 bg-zinc-800/50 hover:bg-zinc-700/50 text-zinc-300 hover:text-white rounded-lg transition-all duration-200 border border-zinc-700/20 text-sm"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2.5 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white rounded-lg transition-all duration-200 font-medium text-sm"
                >
                  Claim My Revenue
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};